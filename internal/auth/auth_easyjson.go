// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package auth

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	types "main.go/internal/types"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4a0f95aaDecodeMainGoInternalAuth(in *jlexer.Lexer, out *RegistrationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "birthday":
			out.Birthday = string(in.String())
		case "gender":
			out.Gender = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "interests":
			if in.IsNull() {
				in.Skip()
				out.Interests = nil
			} else {
				in.Delim('[')
				if out.Interests == nil {
					if !in.IsDelim(']') {
						out.Interests = make([]string, 0, 4)
					} else {
						out.Interests = []string{}
					}
				} else {
					out.Interests = (out.Interests)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Interests = append(out.Interests, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth(out *jwriter.Writer, in RegistrationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.Birthday))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"interests\":"
		out.RawString(prefix)
		if in.Interests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Interests {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegistrationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegistrationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegistrationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegistrationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth1(in *jlexer.Lexer, out *ProfileUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "birthday":
			out.Birthday = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "oldPassword":
			out.OldPassword = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "interests":
			if in.IsNull() {
				in.Skip()
				out.Interests = nil
			} else {
				in.Delim('[')
				if out.Interests == nil {
					if !in.IsDelim(']') {
						out.Interests = make([]string, 0, 4)
					} else {
						out.Interests = []string{}
					}
				} else {
					out.Interests = (out.Interests)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Interests = append(out.Interests, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth1(out *jwriter.Writer, in ProfileUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.String(string(in.Birthday))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"oldPassword\":"
		out.RawString(prefix)
		out.String(string(in.OldPassword))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"interests\":"
		out.RawString(prefix)
		if in.Interests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Interests {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth1(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth2(in *jlexer.Lexer, out *Profile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = types.UserID(in.Int64())
		case "name":
			out.Name = string(in.String())
		case "birthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthday).UnmarshalJSON(data))
			}
		case "description":
			out.Description = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "premium":
			out.Premium = bool(in.Bool())
		case "premiumExpires":
			out.PremiumExpires = int64(in.Int64())
		case "likesLeft":
			out.LikesLeft = int(in.Int())
		case "interests":
			if in.IsNull() {
				in.Skip()
				out.Interests = nil
			} else {
				in.Delim('[')
				if out.Interests == nil {
					if !in.IsDelim(']') {
						out.Interests = make([]*Interest, 0, 8)
					} else {
						out.Interests = []*Interest{}
					}
				} else {
					out.Interests = (out.Interests)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Interest
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Interest)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Interests = append(out.Interests, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([]ImageToSend, 0, 2)
					} else {
						out.Photos = []ImageToSend{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v8 ImageToSend
					(v8).UnmarshalEasyJSON(in)
					out.Photos = append(out.Photos, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "csrft":
			out.CSRFT = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth2(out *jwriter.Writer, in Profile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.Raw((in.Birthday).MarshalJSON())
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"premium\":"
		out.RawString(prefix)
		out.Bool(bool(in.Premium))
	}
	{
		const prefix string = ",\"premiumExpires\":"
		out.RawString(prefix)
		out.Int64(int64(in.PremiumExpires))
	}
	{
		const prefix string = ",\"likesLeft\":"
		out.RawString(prefix)
		out.Int(int(in.LikesLeft))
	}
	{
		const prefix string = ",\"interests\":"
		out.RawString(prefix)
		if in.Interests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Interests {
				if v9 > 0 {
					out.RawByte(',')
				}
				if v10 == nil {
					out.RawString("null")
				} else {
					(*v10).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix)
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Photos {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"csrft\":"
		out.RawString(prefix)
		out.String(string(in.CSRFT))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth2(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth3(in *jlexer.Lexer, out *PaymentOperation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "label":
			out.Label = string(in.String())
		case "datetime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Datetime).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth3(out *jwriter.Writer, in PaymentOperation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix[1:])
		out.String(string(in.Label))
	}
	{
		const prefix string = ",\"datetime\":"
		out.RawString(prefix)
		out.Raw((in.Datetime).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentOperation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentOperation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentOperation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentOperation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth3(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth4(in *jlexer.Lexer, out *PaymentHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "records":
			if in.IsNull() {
				in.Skip()
				out.Times = nil
			} else {
				in.Delim('[')
				if out.Times == nil {
					if !in.IsDelim(']') {
						out.Times = make([]HistoryRecord, 0, 1)
					} else {
						out.Times = []HistoryRecord{}
					}
				} else {
					out.Times = (out.Times)[:0]
				}
				for !in.IsDelim(']') {
					var v13 HistoryRecord
					easyjson4a0f95aaDecodeMainGoInternalAuth5(in, &v13)
					out.Times = append(out.Times, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth4(out *jwriter.Writer, in PaymentHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"records\":"
		out.RawString(prefix[1:])
		if in.Times == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Times {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjson4a0f95aaEncodeMainGoInternalAuth5(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth4(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth5(in *jlexer.Lexer, out *HistoryRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int64(in.Int64())
		case "sum":
			out.Sum = string(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth5(out *jwriter.Writer, in HistoryRecord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Time))
	}
	{
		const prefix string = ",\"sum\":"
		out.RawString(prefix)
		out.String(string(in.Sum))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}
func easyjson4a0f95aaDecodeMainGoInternalAuth6(in *jlexer.Lexer, out *Operations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operations":
			if in.IsNull() {
				in.Skip()
				out.Operations = nil
			} else {
				in.Delim('[')
				if out.Operations == nil {
					if !in.IsDelim(']') {
						out.Operations = make([]PaymentOperation, 0, 1)
					} else {
						out.Operations = []PaymentOperation{}
					}
				} else {
					out.Operations = (out.Operations)[:0]
				}
				for !in.IsDelim(']') {
					var v16 PaymentOperation
					(v16).UnmarshalEasyJSON(in)
					out.Operations = append(out.Operations, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth6(out *jwriter.Writer, in Operations) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"operations\":"
		out.RawString(prefix[1:])
		if in.Operations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Operations {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Operations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Operations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Operations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Operations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth6(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth7(in *jlexer.Lexer, out *Matches) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "matches":
			if in.IsNull() {
				in.Skip()
				out.Match = nil
			} else {
				in.Delim('[')
				if out.Match == nil {
					if !in.IsDelim(']') {
						out.Match = make([]Profile, 0, 0)
					} else {
						out.Match = []Profile{}
					}
				} else {
					out.Match = (out.Match)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Profile
					(v19).UnmarshalEasyJSON(in)
					out.Match = append(out.Match, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth7(out *jwriter.Writer, in Matches) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"matches\":"
		out.RawString(prefix[1:])
		if in.Match == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Match {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Matches) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Matches) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Matches) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Matches) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth7(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth8(in *jlexer.Lexer, out *LoginRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth8(out *jwriter.Writer, in LoginRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth8(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth9(in *jlexer.Lexer, out *Interests) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "interests":
			if in.IsNull() {
				in.Skip()
				out.Interes = nil
			} else {
				in.Delim('[')
				if out.Interes == nil {
					if !in.IsDelim(']') {
						out.Interes = make([]*Interest, 0, 8)
					} else {
						out.Interes = []*Interest{}
					}
				} else {
					out.Interes = (out.Interes)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *Interest
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(Interest)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Interes = append(out.Interes, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth9(out *jwriter.Writer, in Interests) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"interests\":"
		out.RawString(prefix[1:])
		if in.Interes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Interes {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					(*v24).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Interests) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Interests) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Interests) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Interests) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth9(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth10(in *jlexer.Lexer, out *Interest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = types.InterestID(in.Int64())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth10(out *jwriter.Writer, in Interest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Interest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Interest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Interest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Interest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth10(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth11(in *jlexer.Lexer, out *ImageToSend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cell":
			out.Cell = string(in.String())
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth11(out *jwriter.Writer, in ImageToSend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cell\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cell))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ImageToSend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ImageToSend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ImageToSend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ImageToSend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth11(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth12(in *jlexer.Lexer, out *GetMatchesRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth12(out *jwriter.Writer, in GetMatchesRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMatchesRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMatchesRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMatchesRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMatchesRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth12(l, v)
}
func easyjson4a0f95aaDecodeMainGoInternalAuth13(in *jlexer.Lexer, out *CSRFTokenResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "csrft":
			out.Csrft = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4a0f95aaEncodeMainGoInternalAuth13(out *jwriter.Writer, in CSRFTokenResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"csrft\":"
		out.RawString(prefix[1:])
		out.String(string(in.Csrft))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSRFTokenResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4a0f95aaEncodeMainGoInternalAuth13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSRFTokenResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4a0f95aaEncodeMainGoInternalAuth13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSRFTokenResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4a0f95aaDecodeMainGoInternalAuth13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSRFTokenResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4a0f95aaDecodeMainGoInternalAuth13(l, v)
}
