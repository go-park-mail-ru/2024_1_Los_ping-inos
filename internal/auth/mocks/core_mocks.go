// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	auth "main.go/internal/auth"
	proto "main.go/internal/image/protos/gen"
	types "main.go/internal/types"
)

// MockIUseCase is a mock of IUseCase interface.
type MockIUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIUseCaseMockRecorder
}

// MockIUseCaseMockRecorder is the mock recorder for MockIUseCase.
type MockIUseCaseMockRecorder struct {
	mock *MockIUseCase
}

// MockPersonStorage is a mock of PersonStorage interface.
type MockPersonStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPersonStorageMockRecorder
}

// MockPersonStorageMockRecorder is the mock recorder for MockPersonStorage.
type MockPersonStorageMockRecorder struct {
	mock *MockPersonStorage
}

// NewMockPersonStorage creates a new mock instance.
func NewMockPersonStorage(ctrl *gomock.Controller) *MockPersonStorage {
	mock := &MockPersonStorage{ctrl: ctrl}
	mock.recorder = &MockPersonStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonStorage) EXPECT() *MockPersonStorageMockRecorder {
	return m.recorder
}

// AddAccount mocks base method.
func (m *MockPersonStorage) AddAccount(ctx context.Context, Name, Birthday, Gender, Email, Password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccount", ctx, Name, Birthday, Gender, Email, Password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAccount indicates an expected call of AddAccount.
func (mr *MockPersonStorageMockRecorder) AddAccount(ctx, Name, Birthday, Gender, Email, Password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccount", reflect.TypeOf((*MockPersonStorage)(nil).AddAccount), ctx, Name, Birthday, Gender, Email, Password)
}

// Delete mocks base method.
func (m *MockPersonStorage) Delete(ctx context.Context, UID types.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, UID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPersonStorageMockRecorder) Delete(ctx, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPersonStorage)(nil).Delete), ctx, UID)
}

// Get mocks base method.
func (m *MockPersonStorage) Get(ctx context.Context, filter *auth.PersonGetFilter) ([]*auth.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filter)
	ret0, _ := ret[0].([]*auth.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPersonStorageMockRecorder) Get(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPersonStorage)(nil).Get), ctx, filter)
}

// GetMatch mocks base method.
func (m *MockPersonStorage) GetMatch(ctx context.Context, person1ID types.UserID) ([]types.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatch", ctx, person1ID)
	ret0, _ := ret[0].([]types.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatch indicates an expected call of GetMatch.
func (mr *MockPersonStorageMockRecorder) GetMatch(ctx, person1ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatch", reflect.TypeOf((*MockPersonStorage)(nil).GetMatch), ctx, person1ID)
}

// Update mocks base method.
func (m *MockPersonStorage) Update(ctx context.Context, person auth.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPersonStorageMockRecorder) Update(ctx, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPersonStorage)(nil).Update), ctx, person)
}

// MockSessionStorage is a mock of SessionStorage interface.
type MockSessionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStorageMockRecorder
}

// MockSessionStorageMockRecorder is the mock recorder for MockSessionStorage.
type MockSessionStorageMockRecorder struct {
	mock *MockSessionStorage
}

// NewMockSessionStorage creates a new mock instance.
func NewMockSessionStorage(ctrl *gomock.Controller) *MockSessionStorage {
	mock := &MockSessionStorage{ctrl: ctrl}
	mock.recorder = &MockSessionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStorage) EXPECT() *MockSessionStorageMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionStorage) CreateSession(ctx context.Context, UID types.UserID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, UID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionStorageMockRecorder) CreateSession(ctx, UID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionStorage)(nil).CreateSession), ctx, UID)
}

// DeleteSession mocks base method.
func (m *MockSessionStorage) DeleteSession(ctx context.Context, SID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, SID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionStorageMockRecorder) DeleteSession(ctx, SID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionStorage)(nil).DeleteSession), ctx, SID)
}

// GetBySID mocks base method.
func (m *MockSessionStorage) GetBySID(ctx context.Context, SID string) (*auth.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySID", ctx, SID)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySID indicates an expected call of GetBySID.
func (mr *MockSessionStorageMockRecorder) GetBySID(ctx, SID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySID", reflect.TypeOf((*MockSessionStorage)(nil).GetBySID), ctx, SID)
}

// MockInterestStorage is a mock of InterestStorage interface.
type MockInterestStorage struct {
	ctrl     *gomock.Controller
	recorder *MockInterestStorageMockRecorder
}

// MockInterestStorageMockRecorder is the mock recorder for MockInterestStorage.
type MockInterestStorageMockRecorder struct {
	mock *MockInterestStorage
}

// NewMockInterestStorage creates a new mock instance.
func NewMockInterestStorage(ctrl *gomock.Controller) *MockInterestStorage {
	mock := &MockInterestStorage{ctrl: ctrl}
	mock.recorder = &MockInterestStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterestStorage) EXPECT() *MockInterestStorageMockRecorder {
	return m.recorder
}

// CreatePersonInterests mocks base method.
func (m *MockInterestStorage) CreatePersonInterests(ctx context.Context, personID types.UserID, interestID []types.InterestID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePersonInterests", ctx, personID, interestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePersonInterests indicates an expected call of CreatePersonInterests.
func (mr *MockInterestStorageMockRecorder) CreatePersonInterests(ctx, personID, interestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersonInterests", reflect.TypeOf((*MockInterestStorage)(nil).CreatePersonInterests), ctx, personID, interestID)
}

// DeletePersonInterests mocks base method.
func (m *MockInterestStorage) DeletePersonInterests(ctx context.Context, personID types.UserID, interestID []types.InterestID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePersonInterests", ctx, personID, interestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePersonInterests indicates an expected call of DeletePersonInterests.
func (mr *MockInterestStorageMockRecorder) DeletePersonInterests(ctx, personID, interestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersonInterests", reflect.TypeOf((*MockInterestStorage)(nil).DeletePersonInterests), ctx, personID, interestID)
}

// GetInterest mocks base method.
func (m *MockInterestStorage) GetInterest(ctx context.Context, filter *auth.InterestGetFilter) ([]*auth.Interest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterest", ctx, filter)
	ret0, _ := ret[0].([]*auth.Interest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterest indicates an expected call of GetInterest.
func (mr *MockInterestStorageMockRecorder) GetInterest(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterest", reflect.TypeOf((*MockInterestStorage)(nil).GetInterest), ctx, filter)
}

// GetPersonInterests mocks base method.
func (m *MockInterestStorage) GetPersonInterests(ctx context.Context, personID types.UserID) ([]*auth.Interest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonInterests", ctx, personID)
	ret0, _ := ret[0].([]*auth.Interest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonInterests indicates an expected call of GetPersonInterests.
func (mr *MockInterestStorageMockRecorder) GetPersonInterests(ctx, personID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonInterests", reflect.TypeOf((*MockInterestStorage)(nil).GetPersonInterests), ctx, personID)
}

// MockImageClient is a mock of ImageClient interface.
type MockImageClient struct {
	ctrl     *gomock.Controller
	recorder *MockImageClientMockRecorder
}

// MockImageClientMockRecorder is the mock recorder for MockImageClient.
type MockImageClientMockRecorder struct {
	mock *MockImageClient
}

// NewMockImageClient creates a new mock instance.
func NewMockImageClient(ctrl *gomock.Controller) *MockImageClient {
	mock := &MockImageClient{ctrl: ctrl}
	mock.recorder = &MockImageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageClient) EXPECT() *MockImageClientMockRecorder {
	return m.recorder
}

// GetImage mocks base method.
func (m *MockImageClient) GetImage(ctx context.Context, in *proto.GetImageRequest, opts ...grpc.CallOption) (*proto.GetImageResponce, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImage", varargs...)
	ret0, _ := ret[0].(*proto.GetImageResponce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageClientMockRecorder) GetImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageClient)(nil).GetImage), varargs...)
}
