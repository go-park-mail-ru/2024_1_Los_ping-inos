listen_addresses = '*'          # what IP address(es) to listen on;

max_connections = 10                   # (change requires restart)

tcp_keepalives_idle = 60                # TCP_KEEPIDLE, in seconds;                          
tcp_keepalives_interval = 10            # TCP_KEEPINTVL, in seconds;                        
tcp_keepalives_count = 10               # TCP_KEEPCNT;

shared_buffers = 256MB                  # min 128kB
huge_pages = on                       # on, off, or try
temp_buffers = 16MB                     # min 800kB
work_mem = 8MB                         # min 64kB
maintenance_work_mem = 64MB            # min 1MB
dynamic_shared_memory_type = posix      # the default is usually the first option
min_dynamic_shared_memory = 16MB        # (change requires restart)

# This is used when logging to stderr:
logging_collector = on             # Enable capturing of stderr, jsonlog,
log_directory = 'log'                  # directory where log files are written,
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'        # log file name pattern,

log_min_duration_statement = 4        # -1 is disabled, 0 logs all statements
                                # and their durations, > 0 logs only

log_line_prefix = '%m [%p] %q%u@%d ' 


statement_timeout = 10s                  # in milliseconds, 0 is disabled
lock_timeout = 10s                       # in milliseconds, 0 is disabled

#The pg_stat_statements module provides a means for tracking planning and execution 
# statistics of all SQL statements executed by a server
# ----------------------------------------------------------------
# When pg_stat_statements is active, it tracks statistics across all 
# databases of the server. To access and manipulate these statistics, 
# the module provides views pg_stat_statements and pg_stat_statements_info, 
# and the utility functions pg_stat_statements_reset and pg_stat_statements. 
shared_preload_libraries = 'pg_stat_statements'
compute_query_id = on
pg_stat_statements.max = 10000
pg_stat_statements.track = all


# The auto_explain module provides a means for logging execution plans 
# of slow statements automatically, without having to run EXPLAIN by hand. 
# This is especially helpful for tracking down un-optimized queries in large applications.
session_preload_libraries = 'auto_explain'
auto_explain.log_min_duration = '3s'